import os,sys
from itertools 	import product 	# For cartesian product
from operator 	import mul 		# For product of list

from db 		import countDB,insertObject,plotQuery,dropTable,sqlexecute,tentativetable,dropTable
from ase.db 	import connect
from job 		import Job,db2object
from constraint import *
from filters 	import *
from details 	import applyDetails
from createDB 	import tentativedetailstable,jobTable
from initializeCommon import *

"""
Generate a list of jobs to run at some point in the future.

Inputs:
	- DOMAINS for all relevant DFT inputs (xcDomain,pspDomain,pwDomain, etc.)
	- FILTERS to narrow the combinatorial search space generated by the above Domains
	- CONSTRAINTS to more precisely conditions for adding a job 
		(can have complex dependencies between different parameters)

Output: Modifies bulkjob table of data.db
"""

asedb = connect('/scratch/users/ksb/db/ase.db')

"""
####################
# FILTERS TO APPLY #                        
####################                        
"""

#'Ag','Al','Au','Ba','Be','C','Ca','Cd','Co','Cu','Fe','Ge','Ir','K','Li','Mg','Mo','Na','Nb','Ni','Os','Pb','Pd','Rb','Rh','Ru',"Sc","'i','Sn','Sr','Ti','Zn','Zr'

filtersDuJour = [kptFilter(2)
				,singleElems
				,selectElems(['Be','C','Ca','Cd','Co','Cu','Fe','Ge','Ir','K','Li','Mg','Mo','Na','Nb','Ni','Os','Pb','Pd','Rb','Rh','Ru',"Sc","Si",'Sn','Sr','Ti','Zn','Zr'])
				,pwFilterLT(1000)]

filters = andFilters(essentialBulkFilters+filtersDuJour)

"""
########################
# CONSTRAINTS TO APPLY #                                                 
########################
"""

CONSTRAINT_DU_JOUR = []#VARIOUS_ELEMENTS] 

CONSTRAINTS = ESSENTIAL_BULKJOB_CONSTRAINTS + CONSTRAINT_DU_JOUR

################################################################################################
################################################################################################
filteredTrajDomain      = [x for x in trajDomain 	if filters['aseid'](x)]
filteredXCDomain        = [x for x in xcDomain   	if filters['xc'](x)]
filteredPSPDomain       = [x for x in pspDomain  	if filters['psp'](x)]
filteredPWDomain        = [x for x in pwDomain   	if filters['pw'](x)]
filteredKPTDomain       = [x for x in kptDomain  	if filters['kpt'](x)]
filteredPreCalcXCDomain = [x for x in preXcDomain 	if filters['precalc'](x)]
filteredDFTDomain       = [x for x in dftDomain  	if filters['dft'](x)]

combos     = product(filteredTrajDomain,filteredXCDomain,filteredPSPDomain
				,filteredPWDomain,filteredKPTDomain,filteredPreCalcXCDomain,filteredDFTDomain)

domains = [filteredTrajDomain,filteredXCDomain,filteredPWDomain
			,filteredKPTDomain,filteredPSPDomain,filteredPreCalcXCDomain,filteredDFTDomain]


################################################################################################
################################################################################################
def copyToTentative(): 
	command = ("insert into tentativejob "
				+ " (jobid, jobkind,aseidinitial,vibids,nebids,xc,pw,kptden,psp,xtol,strain,convid,precalc,dftcode,comments,error,status) "
				+ " select jobid, jobkind,aseidinitial,vibids,nebids,xc,pw,kptden,psp,xtol,strain,convid,precalc,dftcode,comments,error,status "
				+ " from job")
	sqlexecute(command)

def main():
	
	try: dropTable('tentativejob') # uncomment if script fails in the middle
	except: pass

	sqlexecute(jobTable('tentativejob'))
	copyTable('job','tentativejob')
	
	combos 	= product(*domains)
	nTot 	= reduce(mul,[len(x) for x in [trajDomain,xcDomain,pspDomain,pwDomain,kptDomain,preXcDomain,dftDomain]])
	ncombo 	= reduce(mul,[len(x) for x in domains])
	for i,c in enumerate(combos):	
		print '%f %%'%(i/float(ncombo)*100)
							# jobid jobkind 	aseid vib neb   xc   pw kpt  psp   xtol  strain   convergence ID        precalc dft comm err stat
		tentativeInput 		= [None,'bulkrelax',c[0],None,None,c[1],c[2],c[3],c[4],0.005,0.03, 2 if c[1]=='mBEEF' else 1,c[5],c[6],None,None,'initialized']
		tentativejob 	= Job(*tentativeInput)
		insertObject(tentativejob,tentative=True)

	nJobsInit,nJobsTent = countDB('job'),countDB('tentativejob')

	print "%d tentative jobs after filtering %d jobs"%(ncombo,nTot)

	applyDetails(tentative=True) #populate details table so that plotQuery works

	valid 	= [db2object(x[0],'tentativejob') for x in plotQuery(['jobid'],CONSTRAINTS,tentativetable)] 
	new 	= 0

	question = "Do you want to insert %d valid bulk jobs?\n(y/n)--> "%len(valid)

	if raw_input(question) in ['y','yes']:

		for z in range(len(valid)): 
			ID,status = insertObject(valid[z])
			if status == 'inserted': new +=1
		
		print "%d jobs are new"%new
	
		applyDetails()
		
		dropTable('tentativejob')

if __name__=='__main__':
	main()

