import os,sys

from db 				import insertObject,dropTable,plotQuery,queryManyFromOne,tentativetable,sqlexecute
from createDB 			import tentativedetailstable,jobTable
from ase.db				import connect
from job 				import Job,db2object
from constraint 		import *
from filters 			import *
from initializeCommon	import * #Domains
from details 			import applyDetails

"""
Generate a list of jobs to run at some point in the future.

Inputs:
	- DOMAINS for all relevant DFT inputs (xcDomain,pspDomain,pwDomain, etc.)
	- FILTERS to narrow the combinatorial search space generated by the above Domains
	- CONSTRAINTS to more precisely conditions for adding a job 
		(can have complex dependencies between different parameters)

Output: Modifies bulkjob table of data.db
"""


"""
####################
# FILTERS TO APPLY #                        
####################                        
"""

filtersDuJour 	= [] 

"""
########################
# CONSTRAINTS TO APPLY #
########################
"""
constraintsDuJour = [qe] 


########
# Setup
########
asedb 		= connect('/scratch/users/ksb/db/ase.db')
filters 	= andFilters(essentialSurfJobFilters+filtersDuJour)
constraints = essentialSurfJobConstraints + constraintsDuJour
surfs      	= [x for x in trajDomain if filters['aseid'](x)]

######
# MAIN
######

def main():
	dropTable('tentativejob')
	dropTable('tentativedetails')
	sqlexecute(jobTable('tentativejob'))
	sqlexecute('INSERT INTO tentativejob SELECT * FROM job')
	sqlexecute(tentativedetailstable)

	for i,sID in enumerate(surfs):
		p 		= asedb.get(sID).get('parent')

		cols 	= ['xc','pw','kptden','psp','convid','precalc','dftcode']
		allInfo = queryManyFromOne(cols,'aseid',p)
		
		xc,pw,kptden,psp,convid,precalc,dftcode = allInfo

		tentativeInput	 = [None,'surfrelax',sID,None,None,xc,pw,kptden,psp,None,None,convid,precalc,dftcode,None,None,'initialized']
		tentativeSurfjob = Job(*tentativeInput)
		
		insertObject(tentativeSurfjob,tentative=True)
		
	applyDetails(tentative=True) #populate details table so that plotQuery works

	valid 	= [db2object(x[0],'tentativejob','job') for x in plotQuery(['jobid'],constraints,tentativetable)] 
	new 	= 0

	
	print "%d valid jobs, %d are new"%(len(valid),new)

	question = "Do you want to insert %d new surface jobs?"%new

	if raw_input(question) in ['y','yes']:

		for z in range(len(valid)): 
			ID,status = insertObject(valid[z])
			if status == 'inserted': new +=1

		print "%d jobs are new"%new
		applyDetails()
		dropTable('tentativejob')
		dropTable('tentativedetails')


if __name__=='__main__':
	main()

