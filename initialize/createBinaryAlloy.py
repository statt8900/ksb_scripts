"""
import warnings
warnings.filterwarnings("ignore", message="Moved to ase.neighborlist")

from emt  					import EMT
from printParse 			import parseChemicalFormula

from ase 					import io, Atoms
from ase.lattice.cubic 		import FaceCenteredCubic,BodyCenteredCubic,Diamond
from ase.lattice.hexagonal 	import HexagonalClosedPacked

import data_solids_wPBE as data


##################
# INPUT parameters
##################
magmomInit 	= 3 # If magnetic, initialize with this magmom
isMag 		= False # Look up whatever you create beforehand
struct 		= 'fcc' #['bcc','fcc','hcp','rocksalt','diamond','zincblende','cscl']

################
# Database Setup
################
from ase.db import connect
db = connect('/scratch/users/ksb/db/ase.db')

###############
# Mini Database
###############

magElems = ['Fe','Mn','Cr','Co','Ni']


###############
# Main Function
###############

if __name__ == '__main__':
	main()

def main():

	f = x in fccs
	b = x in bccs
	h = x in hcps
	d = x in diamonds
	r = x in rocksalts
	z = x in zincblendes
	c = x in cscls
	
	try: 
		if   f: a = FaceCenteredCubic(x[0]).get_cell()[0][0]/2
		elif b: a = BodyCenteredCubic(x[0]).get_cell()[0][0]/2
		elif d: a = Diamond(x[0]).get_cell()[0][0]/2
		elif h: 
				cell = HexagonalClosedPacked(x[0]).get_cell()
				a,c = cell[0][0],cell[2][2]

		elif r | z | c: a = dataLookup(x[0])
		else: raise NotImplementedError

	except ValueError: 
		a = dataLookup(x[0])/2
		#a = sum([radDict[e] for e in elems])/len(elems)
		print "Had to guess lattice constant of "+x[0]

	if   f: name,struc,pos,cell,n = '-fcc',       'fcc',        [[0,0,0]],                  [[0,a,a],[a,0,a],[a,a,0]],   1
	elif b: name,struc,pos,cell,n = '-bcc',       'bcc',        [[0,0,0]],                  [[a,a,-a],[-a,a,a],[a,-a,a]],1
	elif h: name,struc,pos,cell,n = '-hcp',       'hexagonal',  [[0,0,0],[2./3,1./3,1./2]], [a,a,c,90,90,120],           2
	elif d: name,struc,pos,cell,n = '-diamond',   'diamond',    [[0,0,0],[0.25,0.25,0.25]], [[0,a,a],[a,0,a],[a,a,0]],   2
	elif z: name,struc,pos,cell,n = '-zincblende','zincblende', [[0,0,0],[0.25,0.25,0.25]], [[0,a,a],[a,0,a],[a,a,0]],   1
	elif r: name,struc,pos,cell,n = '-rocksalt',  'rocksalt',   [[0,0,0],[0.5,0.5,0.5]],    [[0,a,a],[a,0,a],[a,a,0]],   1
	elif c: name,struc,pos,cell,n = '-cscl',      'cubic',      [[0,0,0],[0.5,0.5,0.5]],    [a,a,a,90,90,90],            1

	mag     = magLookup(x[0])
	elems 	= parseChemicalFormula(x[0]).keys()*n
	magmoms = [magmomInit if e in magElems else 0 for e in elems] 

	atoms = Atoms(elems,scaled_positions=pos,cell=cell,pbc=[1,1,1],magmoms=magmoms,calculator=EMT())
	
	info = 	{'name': 		x[0]+name
			,'relaxed': 	False
			,'emt': 		atoms.get_potential_energy()/len(elems)	#normalized to per-atom basis
			,'comments':	'Autogenerated by createBinaryAlloy'
			,'kind': 		'bulk' # vs surface/molecules
			### Stuff for bulk
			,'structure': 	struc
		}

	db.write(atoms,key_value_pairs=info)



"""



