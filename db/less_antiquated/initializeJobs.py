import os,sys
from itertools 	import product 	# For cartesian product
from operator 	import mul 		# For product of list

from db 		import countDB,insertObject,sqlexecute,deleteTable,plotQuery
from ase.db 	import connect
from bulkjob 	import BulkJob,db2BulkJob
from constraint import *
from filters 	import *

from initializeCommonJobs import *

"""
Generate a list of jobs to run at some point in the future.

Inputs:
	- DOMAINS for all relevant DFT inputs (xcDomain,pspDomain,pwDomain, etc.)
	- FILTERS to narrow the combinatorial search space generated by the above Domains
	- CONSTRAINTS to more precisely conditions for adding a job 
		(can have complex dependencies between different parameters)

Output: Modifies bulkjob table of data.db
"""

asedb = connect('/scratch/users/ksb/db/ase.db')

"""
####################
# FILTERS TO APPLY #                        
####################                        
"""

filtersDuJour = [kptFilter(4)
				,singleElems
				,pwFilterGT(1000)] 

filters = andFilters(essentialBulkFilters+filtersDuJour)

"""
########################
# CONSTRAINTS TO APPLY #                                                       
########################
"""

constraintsDuJour = [badElements] 

constraints = essentialBulkJobConstraints + constraintsDuJour

################################################################################################
################################################################################################
filteredTrajDomain      = [x for x in trajDomain if filters['aseid'](x)]
filteredXCDomain        = [x for x in xcDomain   if filters['xc'](x)]
filteredPSPDomain       = [x for x in pspDomain  if filters['psp'](x)]
filteredPWDomain        = [x for x in pwDomain   if filters['pw'](x)]
filteredKPTDomain       = [x for x in kptDomain  if filters['kpt'](x)]
filteredPreCalcXCDomain = [x for x in preXcDomain if filters['precalc'](x)]
filteredDFTDomain       = [x for x in dftDomain  if filters['dft'](x)]

combos     = product(filteredTrajDomain,filteredXCDomain,filteredPSPDomain
				,filteredPWDomain,filteredKPTDomain,filteredPreCalcXCDomain,filteredDFTDomain)


################################################################################################
################################################################################################

def main():

	try: deleteTable('tentative') #WHAT IS GOING ON HERE? 
	except:  pass
	try:  createTentativeBulkTable()
	except: pass
	
	domains = [filteredTrajDomain,filteredXCDomain,filteredPSPDomain
				,filteredPWDomain,filteredKPTDomain,filteredPreCalcXCDomain,filteredDFTDomain]
	combos     = product(*domains)
	ncombo 		= reduce(mul,[len(x) for x in domains])
	for i,c in enumerate(combos):	
		print '%f%'%(i/float(ncombo)*100)
		tentativeInput = c[:5]+tuple(defaults) + c[5:]
		tentativeBulkjob = BulkJob(*tentativeInput)

		if tentativeBulkjob.xc == 'mBEEF':  #defaults slightly different for mBEEF
			tentativeBulkjob.sigma +=0.1
			tentativeBulkjob.sigma -=0.05

		ID,status = insertObject(tentativeBulkjob,tentative=True)
	print "%d tentative jobs"%countDB('tentative')

	valid = [db2BulkJob(x[0],tentative=True) for x in plotQuery('tentative',['tentative.id'],constraints)] 
	new = 0

	for z in range(len(valid)): 
		ID,status = insertObject(valid[z])
		if status == 'inserted': new +=1
	print "%d valid jobs, %d are new"%(len(valid),new)
	deleteTable('tentative')

if __name__=='__main__':
	main()

