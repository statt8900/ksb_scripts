import warnings
warnings.filterwarnings("ignore", message="Moved to ase.neighborlist")

from miniDatabase import *
from printParse import parseChemicalFormula
from ase import io, Atoms
from ase.lattice.cubic import FaceCenteredCubic,BodyCenteredCubic,Diamond
from ase.lattice.hexagonal import HexagonalClosedPacked
import os
import data_solids_wPBE as data

#####################################################################
#####################################################################
#####################################################################

# Keywords for Atoms.info that may be used:
# name    (assumed identical to path if not specified)
# bravais (assumed triclinic if not specified)
# comments

#####################################################################
#####################################################################
#####################################################################

root='/scratch/users/ksb/db/traj/'
ds = os.listdir(root)


#####################################################################
#####################################################################
#####################################################################

def magLookup(symbs):
	for d in data.data.values():
		if d['symbols'] == symbs: return d['magmom'] is not None
	raise KeyError, 'Symbols {0} were not found in data_solids_wPBE'.format(symbs)

def dataLookup(symbs):
	for d in data.data.values():
		if d['symbols'] == symbs: return d['lattice parameter']
	raise KeyError, 'Symbols {0} were not found in data_solids_wPBE'.format(symbs)
#####################################################################
#####################################################################
#####################################################################
for f in fccs:
    #try:               a = FaceCenteredCubic(f[0]).get_cell()[0][0]/2.
	try:               a = FaceCenteredCubic(f[0]).get_cell()[0][0]*(2**(-0.5))
	except ValueError: a = radDict[f[0]];print "Should look up lattice constant of "+f[0]
	name = root+f[0]+'-fcc.traj'
	mag  = magLookup(f[0])
	info = {'name':f[0]+'-fcc','bravais':'trigonal','comments':'Autogenerated by createTrajs'}
	if name not in ds:
		io.write(name,Atoms(f[0],scaled_positions=[[0,0,0]],cell=[a,a,a,60,60,60],pbc=[1,1,1]
			,magmoms=[3 if e in magElems else 0 for e in f[0]],info=info))
        #io.write(name,Atoms(f[0],scaled_positions=[[0,0,0]],cell=[[0,a,a],[a,0,a],[a,a,0]],pbc=[1,1,1],info=info))
#####################################################################
#####################################################################

for b in bccs:
	try:                a = BodyCenteredCubic(b[0]).get_cell()[0][0]/2
	except ValueError:	a = radDict[b[0]]; print "Should look up lattice constant of "+b[0]
	name = root+b[0]+'-bcc.traj'
	mag  = magLookup(b[0])
	info = {'name':b[0]+'-bcc','bravais':'cubic','mag':mag,'comments':'Autogenerated by createTrajs'}
	if name not in ds:
		io.write(name,Atoms(b[0],scaled_positions=[[0,0,0]],cell=[[a,a,-a],[-a,a,a],[a,-a,a]],pbc=[1,1,1]
			,magmoms=[3 if e in magElems else 0 for e in b[0]],info=info))
#####################################################################
#####################################################################

for h in hcps:
	try:              	
		cell = HexagonalClosedPacked(h[0]).get_cell()
		a,c = cell[0][0],cell[2][2]
	except ValueError:	
		a = radDict[h[0]]
		c = a*1.7
	name = root+h[0]+'-hcp.traj'
	mag  = magLookup(h[0])
	info = {'name':h[0]+'-hcp','bravais':'hexagonal','mag':mag,'comments':'Autogenerated by createTrajs'}
	if name not in ds:
		io.write(name,Atoms([h[0]]*2,scaled_positions=[[0,0,0],[2./3,1./3,1./2]],cell=[a,a,c,90,90,120],pbc=[1,1,1]
			magmoms=[3 if e in magElems else 0 for e in h[0]],info=info))
#####################################################################
#####################################################################

for d in diamonds:
	try:               a = Diamond(d[0]).get_cell()[0][0]*(2**(-0.5))
	except ValueError: a = radDict[d[0]]; print "Guessed lattice constant of "+d[0]
	name=root+d[0]+'-diamond.traj'
	mag  = magLookup(d[0])
	info = {'name':d[0]+'-diamond','bravais':'trigonal','mag':mag,'comments':'Autogenerated by createTrajs'}
	if name not in ds:
		io.write(name,Atoms([d[0]]*2,scaled_positions=[[0,0,0],[0.25,0.25,0.25]],cell=[a,a,a,60,60,60],pbc=[1,1,1]
		magmoms=[3 if e in magElems else 0 for e in d[0]],info=info))
#####################################################################
#####################################################################
for r in rocksalts:
	a = dataLookup(r[0])
	name = root+ r[0] + '-rocksalt.traj'
	mag  = magLookup(r[0])
	info = {'name':r[0]+'-rocksalt','bravais':'trigonal','mag':mag,'comments':'Autogenerated by createTrajs'}
	elems = parseChemicalFormula(r[0]).keys()
	io.write(name,Atoms(elems,scaled_positions=[[0,0,0],[0.5,0.5,0.5]],cell=[a,a,a,60,60,60],pbc=[1,1,1],
		magmoms=[3 if e in magElems else 0 for e in r[0]],info=info))
#####################################################################
#####################################################################

for c in cscls:
	a = dataLookup(c[0])
	name = root+ c[0] + '-cscl.traj'
	mag  = magLookup(c[0])
	info = {'name':c[0]+'-cscl','bravais':'cubic','mag':mag,'comments':'Autogenerated by createTrajs'}
	elems = parseChemicalFormula(c[0]).keys()
	io.write(name,Atoms(elems,scaled_positions=[[0,0,0],[0.5,0.5,0.5]],cell=[a,a,a,90,90,90],pbc=[1,1,1],
		magmoms=[3 if e in magElems else 0 for e in c[0]]info=info))
#####################################################################
#####################################################################

for z in zincblendes:
	a = dataLookup(z[0])
	name = root+ z[0] + '-zincblende.traj'
	mag  = magLookup(z[0])
	info = {'name':z[0]+'-zincblende','bravais':'trigonal','mag':mag,'comments':'Autogenerated by createTrajs'}
	elems = parseChemicalFormula(z[0]).keys()
	io.write(name,Atoms(elems,scaled_positions=[[0,0,0],[0.25,0.25,0.25]],cell=[a,a,a,60,60,60],pbc=[1,1,1],
		magmoms=[3 if e in magElems else 0 for e in z[0]]info=info))
#####################################################################
#####################################################################

